/****************************************************************************** 
 * 
 * @copyright Copyright (C) Ondrej Ille - All Rights Reserved
 * 
 * Copying, publishing, distributing of this file is stricly prohibited unless
 * previously aggreed with author of this text.
 * 
 * @author Ondrej Ille, <ondrej.ille@gmail.com>
 * @date 11.4.2020
 * 
 *****************************************************************************/

/******************************************************************************
 * 
 * @test ISO16845 7.3.1
 * 
 * @brief This test verifies that the IUT tolerates up to 7 consecutive
 *        dominant bits after sending an active error flag.
 * @version Classical CAN, CAN FD Tolerant, CAN FD Enabled
 * 
 * Test variables:
 *  Classical CAN, CAN FD Tolerant, CAN FD Enabled
 *      FDF = 0
 * 
 *  CAN FD Enabled
 *      FDF = 1
 * 
 * Elementary test cases:
 *      #1 lengthening the error flag by 1 dominant bit;
 *      #2 lengthening the error flag by 4 dominant bits;
 *      #3 lengthening the error flag by 7 dominant bits.
 *
 * Setup:
 *  The IUT is left in the default state.
 * 
 * Execution:
 *  The LT causes the IUT to generate an error frame in data field.
 *  The LT lengthens the error flag generated by the IUT according to
 *  elementary test cases.
 * 
 * Response:
 *  After sending the active error flag, the IUT sends recessive bits.
 *****************************************************************************/

#include <iostream>
#include <unistd.h>
#include <chrono>

#include "../vpi_lib/vpiComplianceLib.hpp"

#include "../test_lib/test_lib.h"
#include "../test_lib/TestBase.h"
#include "../test_lib/TestSequence.h"
#include "../test_lib/DriverItem.h"
#include "../test_lib/MonitorItem.h"
#include "../test_lib/TestLoader.h"

#include "../can_lib/can.h"
#include "../can_lib/Frame.h"
#include "../can_lib/BitFrame.h"
#include "../can_lib/FrameFlags.h"
#include "../can_lib/BitTiming.h"

using namespace can;

class TestIso_7_3_1 : public test_lib::TestBase
{
    public:

        int Run()
        {
            // Run Base test to setup TB
            TestBase::Run();
            TestMessage("Test %s : Run Entered", test_name);

            /*****************************************************************
             * Common part of test (i=0) / CAN FD enabled part of test (i=1)
             ****************************************************************/

            int iterCnt;
            FrameType dataRate;
            uint8_t dataByte = 0x80;

            if (dut_can_version == CanVersion::CanFdEnabled)
                iterCnt = 2;
            else
                iterCnt = 1;

            for (int i = 0; i < iterCnt; i++)
            {
                if (i == 0)
                {
                    TestMessage("Common part of test!");
                    dataRate = FrameType::Can2_0;
                } else {
                    TestMessage("CAN FD enabled part of test!");
                    dataRate = FrameType::CanFd;
                }

                for (int j = 0; j < 3; j++)
                {
                    // CAN 2.0 / CAN FD, DLC = 1, DATA Frame, Data byte = 0x01
                    // randomize Identifier 
                    FrameFlags frameFlags = FrameFlags(dataRate, RtrFlag::DataFrame);
                    golden_frame = new Frame(frameFlags, 1, &dataByte);
                    golden_frame->Randomize();
                    TestBigMessage("Test frame:");
                    golden_frame->Print();
                    TestMessage("Prolonging Active Error flag by: %d", (3 * j) + 1);

                    // Convert to Bit frames
                    driver_bit_frame = new BitFrame(*golden_frame,
                        &this->nominal_bit_timing, &this->data_bit_timing);
                    monitor_bit_frame = new BitFrame(*golden_frame,
                        &this->nominal_bit_timing, &this->data_bit_timing);

                    /**
                     * Modify test frames:
                     *   1. Monitor frame as if received.
                     *   2. Force 7-th bit of Data frame to opposite, this should be stuff bit!
                     *      This will cause stuff error!
                     *   3. Insert Active Error frame from 8-th bit of data frame!
                     *   4. Prolong Active error flag by 1,4,7 bits respectively.
                     *      Prolong Monitored error delimier by 1,4,7 Recessive bits!
                     */
                    monitor_bit_frame->TurnReceivedFrame();
                    driver_bit_frame->GetBitOf(6, BitType::Data)->FlipBitValue();

                    monitor_bit_frame->InsertActiveErrorFrame(
                        monitor_bit_frame->GetBitOf(7, BitType::Data));
                    driver_bit_frame->InsertActiveErrorFrame(
                        driver_bit_frame->GetBitOf(7, BitType::Data));

                    int numBitsToInsert;
                    if (j == 0)
                        numBitsToInsert = 1;
                    else if (j == 1)
                        numBitsToInsert = 4;
                    else
                        numBitsToInsert = 7;

                    // Prolong driven frame by 1,4,7 DOMINANT bits
                    int drvLastErrFlgIndex = driver_bit_frame->GetBitIndex(
                        driver_bit_frame->GetBitOf(5, BitType::ActiveErrorFlag));
                    for (int k = 0; k < numBitsToInsert; k++)
                        driver_bit_frame->InsertBit(
                            Bit(BitType::ActiveErrorFlag, BitValue::Dominant, &frameFlags,
                                &nominal_bit_timing, &data_bit_timing),
                            drvLastErrFlgIndex);

                    // Prolong monitored frame by 1,4,7 RECESSIVE bits
                    int monLastErrFlgIndex = monitor_bit_frame->GetBitIndex(
                        monitor_bit_frame->GetBitOf(0, BitType::ErrorDelimiter));
                    for (int k = 0; k < numBitsToInsert; k++)
                        monitor_bit_frame->InsertBit(
                            Bit(BitType::ErrorDelimiter, BitValue::Recessive, &frameFlags,
                                &nominal_bit_timing, &data_bit_timing),
                            monLastErrFlgIndex);

                    driver_bit_frame->Print(true);
                    monitor_bit_frame->Print(true);

                    // Push frames to Lower tester, run and check!
                    PushFramesToLowerTester(*driver_bit_frame, *monitor_bit_frame);
                    RunLowerTester(true, true);
                    CheckLowerTesterResult();

                    // Check no frame is received by DUT
                    if (dut_ifc->HasRxFrame())
                        test_result = false;

                    DeleteCommonObjects();
                }
            }

            TestControllerAgentEndTest(test_result);
            TestMessage("Test %s : Run Exiting", test_name);
            return test_result;

            /*****************************************************************
             * Test sequence end
             ****************************************************************/
        }
};