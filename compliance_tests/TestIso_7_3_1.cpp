/****************************************************************************** 
 * 
 * @copyright Copyright (C) Ondrej Ille - All Rights Reserved
 * 
 * Copying, publishing, distributing of this file is stricly prohibited unless
 * previously aggreed with author of this text.
 * 
 * @author Ondrej Ille, <ondrej.ille@gmail.com>
 * @date 11.4.2020
 * 
 *****************************************************************************/

/******************************************************************************
 * 
 * @test ISO16845 7.3.1
 * 
 * @brief This test verifies that the IUT tolerates up to 7 consecutive
 *        dominant bits after sending an active error flag.
 * @version Classical CAN, CAN FD Tolerant, CAN FD Enabled
 * 
 * Test variables:
 *  Classical CAN, CAN FD Tolerant, CAN FD Enabled
 *      FDF = 0
 * 
 *  CAN FD Enabled
 *      FDF = 1
 * 
 * Elementary test cases:
 *      #1 lengthening the error flag by 1 dominant bit;
 *      #2 lengthening the error flag by 4 dominant bits;
 *      #3 lengthening the error flag by 7 dominant bits.
 *
 * Setup:
 *  The IUT is left in the default state.
 * 
 * Execution:
 *  The LT causes the IUT to generate an error frame in data field.
 *  The LT lengthens the error flag generated by the IUT according to
 *  elementary test cases.
 * 
 * Response:
 *  After sending the active error flag, the IUT sends recessive bits.
 *****************************************************************************/

#include <iostream>
#include <unistd.h>
#include <chrono>

#include "../vpi_lib/vpiComplianceLib.hpp"

#include "../test_lib/test_lib.h"
#include "../test_lib/TestBase.h"
#include "../test_lib/TestSequence.h"
#include "../test_lib/DriverItem.h"
#include "../test_lib/MonitorItem.h"
#include "../test_lib/TestLoader.h"

#include "../can_lib/can.h"
#include "../can_lib/Frame.h"
#include "../can_lib/BitFrame.h"
#include "../can_lib/FrameFlags.h"
#include "../can_lib/BitTiming.h"

using namespace can;

class TestIso_7_3_1 : public test_lib::TestBase
{
    public:

        Frame *goldenFrame;
        BitFrame *driverBitFrame;
        BitFrame *monitorBitFrame;

        TestIso_7_3_1() : TestBase()
        {}

        /*****************************************************************
         * Test sequence
         ****************************************************************/
        int run()
        {
            // Run Base test to setup TB
            TestBase::run();
            testMessage("Test %s : Run Entered", testName);

            /*****************************************************************
             * Common part of test (i=0) / CAN FD enabled part of test (i=1)
             ****************************************************************/

            int iterCnt;
            FlexibleDataRate dataRate;
            uint8_t dataByte = 0x80;

            if (canVersion == CAN_FD_ENABLED_VERSION)
                iterCnt = 2;
            else
                iterCnt = 1;

            for (int i = 0; i < iterCnt; i++)
            {
                if (i == 0)
                {
                    testMessage("Common part of test!");
                    dataRate = CAN_2_0;
                } else {
                    testMessage("CAN FD enabled part of test!");
                    dataRate = CAN_FD;
                }

                for (int j = 0; j < 3; j++)
                {
                    // CAN 2.0 / CAN FD, DLC = 1, DATA Frame, Data byte = 0x01
                    // randomize Identifier 
                    FrameFlags frameFlags = FrameFlags(dataRate, DATA_FRAME);
                    goldenFrame = new Frame(frameFlags, 1, &dataByte);
                    goldenFrame->randomize();
                    testBigMessage("Test frame:");
                    goldenFrame->print();
                    testMessage("Prolonging Active Error flag by: %d", (3 * j) + 1);

                    // Convert to Bit frames
                    driverBitFrame = new BitFrame(*goldenFrame,
                        &this->nominalBitTiming, &this->dataBitTiming);
                    monitorBitFrame = new BitFrame(*goldenFrame,
                        &this->nominalBitTiming, &this->dataBitTiming);

                    /**
                     * Modify test frames:
                     *   1. Monitor frame as if received.
                     *   2. Force 7-th bit of Data frame to opposite, this should be stuff bit!
                     *      This will cause stuff error!
                     *   3. Insert Active Error frame from 8-th bit of data frame!
                     *   4. Prolong Active error flag by 1,4,7 bits respectively.
                     *      Prolong Monitored error delimier by 1,4,7 Recessive bits!
                     */
                    monitorBitFrame->turnReceivedFrame();
                    driverBitFrame->getBitOf(6, BitType::BIT_TYPE_DATA)->flipBitValue();

                    monitorBitFrame->insertActiveErrorFrame(
                        monitorBitFrame->getBitOf(7, BitType::BIT_TYPE_DATA));
                    driverBitFrame->insertActiveErrorFrame(
                        driverBitFrame->getBitOf(7, BitType::BIT_TYPE_DATA));

                    int numBitsToInsert;
                    if (j == 0)
                        numBitsToInsert = 1;
                    else if (j == 1)
                        numBitsToInsert = 4;
                    else
                        numBitsToInsert = 7;

                    // Prolong driven frame by 1,4,7 DOMINANT bits
                    int drvLastErrFlgIndex = driverBitFrame->getBitIndex(
                        driverBitFrame->getBitOf(5, BitType::BIT_TYPE_ACTIVE_ERROR_FLAG));
                    for (int k = 0; k < numBitsToInsert; k++)
                        driverBitFrame->insertBit(
                            Bit(BIT_TYPE_ACTIVE_ERROR_FLAG, DOMINANT, &frameFlags,
                                &nominalBitTiming, &dataBitTiming),
                            drvLastErrFlgIndex);

                    // Prolong monitored frame by 1,4,7 RECESSIVE bits
                    int monLastErrFlgIndex = monitorBitFrame->getBitIndex(
                        monitorBitFrame->getBitOf(0, BitType::BIT_TYPE_ERROR_DELIMITER));
                    for (int k = 0; k < numBitsToInsert; k++)
                        monitorBitFrame->insertBit(
                            Bit(BIT_TYPE_ERROR_DELIMITER, RECESSIVE, &frameFlags,
                                &nominalBitTiming, &dataBitTiming),
                            monLastErrFlgIndex);

                    driverBitFrame->print(true);
                    monitorBitFrame->print(true);

                    // Push frames to Lower tester, run and check!
                    pushFramesToLowerTester(*driverBitFrame, *monitorBitFrame);
                    runLowerTester(true, true);
                    checkLowerTesterResult();

                    // Check no frame is received by DUT
                    if (dutIfc->hasRxFrame())
                        testResult = false;

                    delete goldenFrame;
                    delete driverBitFrame;
                    delete monitorBitFrame;
                }
            }

            testControllerAgentEndTest(testResult);
            testMessage("Test %s : Run Exiting", testName);
            return testResult;

            /*****************************************************************
             * Test sequence end
             ****************************************************************/
        }
};