/****************************************************************************** 
 * 
 * @copyright Copyright (C) Ondrej Ille - All Rights Reserved
 * 
 * Copying, publishing, distributing of this file is stricly prohibited unless
 * previously aggreed with author of this text.
 * 
 * @author Ondrej Ille, <ondrej.ille@gmail.com>
 * @date 31.7.2020
 * 
 *****************************************************************************/

/******************************************************************************
 *
 * @test ISO16845 8.4.1
 *
 * @brief This test verifies that an IUT acting as transmitter generates an
 *        overload frame when it detects a dominant bit on one of the 2 first
 *        recessive bits of the intermission field following a data frame it
 *        is transmitting.
 *
 * @version Classical CAN, CAN FD tolerant, CAN FD enabled
 *
 * Test variables:
 *      Classical CAN, CAN FD Tolerant, CAN FD Enabled:
 *          FDF = 0
 *      CAN FD Enabled:
 *          FDF = 1
 *
 * Elementary test cases:
 *      Elementary tests to perform:
 *          #1 dominant bit on first bit of the intermission field;
 *          #2 dominant bit on second bit of the intermission field.
 * 
 * Setup:
 *  The IUT is set to the TEC passive state.
 *
 * Execution:
 *  The LT causes the IUT to transmit a frame. Then, the LT forces one of the 
 *  bits of the intermission field to the dominant state according to
 *  elementary test-cases.
 * 
 * Response:
 *  The IUT shall generate an overload frame starting at the bit position
 *  following the dominant bit generated by the LT.
 *****************************************************************************/

#include <iostream>
#include <unistd.h>
#include <chrono>
#include <cmath>

#include "../vpi_lib/vpiComplianceLib.hpp"

#include "../test_lib/test_lib.h"
#include "../test_lib/TestBase.h"
#include "../test_lib/TestSequence.h"
#include "../test_lib/DriverItem.h"
#include "../test_lib/MonitorItem.h"
#include "../test_lib/TestLoader.h"

#include "../can_lib/can.h"
#include "../can_lib/Frame.h"
#include "../can_lib/BitFrame.h"
#include "../can_lib/FrameFlags.h"
#include "../can_lib/BitTiming.h"

using namespace can;

class TestIso_8_4_1 : public test_lib::TestBase
{
    public:

        int run()
        {
            // Run Base test to setup TB
            TestBase::run();
            testMessage("Test %s : Run Entered", testName);

            // Start monitoring when DUT starts transmitting!
            canAgentMonitorSetTrigger(CAN_AGENT_MONITOR_TRIGGER_TX_FALLING);
            canAgentSetMonitorInputDelay(std::chrono::nanoseconds(0));

            // Configure driver to wait for monitor so that LT sends ACK in right moment.
            canAgentSetWaitForMonitor(true);

            canAgentConfigureTxToRxFeedback(true);

            // Set TEC, so that IUT becomes error passive. Keep sufficient
            // reserve from 128 for decrements due to test frames!
            dutIfc->setTec(200);

            int iterCnt;

            if (canVersion == CAN_FD_ENABLED_VERSION)
                iterCnt = 2;
            else
                iterCnt = 1;

            /*****************************************************************
             * Common part of test (i=0), CAN FD enabled part of test(i=1)
             ****************************************************************/
            for (int i = 0; i < iterCnt; i++)
            {
                if (i == 0)
                    testMessage("CAN 2.0 part of test");
                else
                    testMessage("CAN FD part of test");

                for (int j = 0; j < 2; j++)
                {
                    FrameFlags frameFlags;

                    if (i == 0)
                        frameFlags = FrameFlags(CAN_2_0, DATA_FRAME);
                    else
                        frameFlags = FrameFlags(CAN_FD, ESI_ERROR_PASSIVE);

                    goldenFrame = new Frame(frameFlags);
                    goldenFrame->randomize();
                    testBigMessage("Test frame:");
                    goldenFrame->print();

                    // Convert to Bit frames
                    driverBitFrame = new BitFrame(*goldenFrame,
                        &this->nominalBitTiming, &this->dataBitTiming);
                    monitorBitFrame = new BitFrame(*goldenFrame,
                        &this->nominalBitTiming, &this->dataBitTiming);

                    /**
                     * Modify test frames:
                     *  1. Turn driven frame as received.
                     *  2. Force first or second bit of intermission to
                     *     dominant. Insert Overload frame on monitored frame
                     *     from next bit. Insert Passive Error frame to driven
                     *     frame. This also lasts the same length as Overload
                     *     frame and it consists of 14 recessive bits. Therefore
                     *     LT will not affect IUT in any way!
                     *  3. Insert 15 more recessive bits at the end to both
                     *     driven and monitored frames. This should cover intermission
                     *     suspend and some reserve and check that IUT does not
                     *     retransmitt the frame!
                     */
                    driverBitFrame->turnReceivedFrame();
                    
                    driverBitFrame->getBitOf(j, BIT_TYPE_INTERMISSION)->setBitValue(DOMINANT);
                    monitorBitFrame->insertOverloadFrame(
                        monitorBitFrame->getBitOf(j + 1, BIT_TYPE_INTERMISSION));
                    driverBitFrame->insertPassiveErrorFrame(
                        driverBitFrame->getBitOf(j + 1, BIT_TYPE_INTERMISSION));

                    int endOfIntermissionIndex = monitorBitFrame->getBitIndex(
                        monitorBitFrame->getBitOf(7, BIT_TYPE_OVERLOAD_DELIMITER));
                    for (int k = 0; k < 15; k++)
                    {
                        driverBitFrame->insertBit(Bit(BIT_TYPE_IDLE, RECESSIVE,
                            &frameFlags, &nominalBitTiming, &dataBitTiming), endOfIntermissionIndex);
                        monitorBitFrame->insertBit(Bit(BIT_TYPE_IDLE, RECESSIVE,
                            &frameFlags, &nominalBitTiming, &dataBitTiming), endOfIntermissionIndex);
                    }

                    driverBitFrame->print(true);
                    monitorBitFrame->print(true);

                    // Push frames to Lower tester, insert to DUT, run and check!
                    pushFramesToLowerTester(*driverBitFrame, *monitorBitFrame);
                    startDriverAndMonitor();

                    testMessage("Sending frame via DUT!");
                    this->dutIfc->sendFrame(goldenFrame);
                    testMessage("Sent frame via DUT!");
                    
                    waitForDriverAndMonitor();
                    checkLowerTesterResult();

                    deleteCommonObjects();   
                }
            }

            testControllerAgentEndTest(testResult);
            testMessage("Test %s : Run Exiting", testName);
            return testResult;

            /*****************************************************************
             * Test sequence end
             ****************************************************************/
        }
};